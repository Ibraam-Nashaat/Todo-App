- name: Configure VM with Kubernetes (k3s) and ArgoCD
  hosts: all
  become: yes

  tasks:
    - name: Update apt
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
          - gnupg
          - software-properties-common
        state: present

    - name: Add Dockerâ€™s official GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker APT repository
      shell: |
        echo \
        "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
        https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Install Docker Engine and Compose plugin (latest)
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: latest
        update_cache: yes

    - name: Add user to docker group
      user:
        name: "{{ lookup('env', 'VM_USER') }}"
        groups: docker
        append: yes

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Install K3s (without traefik)
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--write-kubeconfig-mode 644 --disable traefik" sh -
      args:
        creates: /usr/local/bin/k3s  # Idempotency check

    - name: Set KUBECONFIG for all users
      blockinfile:
        path: /etc/profile.d/k3s.sh
        block: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
        create: yes
        mode: '0644'

    - name: Install kubectl (static version)
      get_url:
        url: "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
        validate_certs: no

    - name: Install ArgoCD CLI
      get_url:
        url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        dest: /usr/local/bin/argocd
        mode: '0755'
        validate_certs: no

    - name: Deploy ArgoCD
      shell: |
        kubectl create namespace argocd 2>/dev/null || true
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Wait for ArgoCD to be ready
      shell: |
        kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=300s
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
